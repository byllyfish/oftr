// Copyright (c) 2015-2018 William W. Fisher (at gmail dot com)
// This file is distributed under the MIT License.

#include "ofp/lldpvalue.h"

#include <numeric>

#include "ofp/unittest.h"

using namespace ofp;

TEST(lldpvalue, constructor) {
  LLDPValue<LLDPType::ChassisID> value1;
  EXPECT_HEX(
      "000000000000000000000000000000000000000000000000000000000000000000000000"
      "00000000000000000000000000000000000000000000000000000000",
      &value1, sizeof(value1));
  EXPECT_EQ(0, value1.size());
  EXPECT_EQ(value1.maxSize(), sizeof(value1) - 1);

  LLDPValue<LLDPType::ChassisID> value2{{"abcde", 5}};
  EXPECT_HEX(
      "056162636465000000000000000000000000000000000000000000000000000000000000"
      "00000000000000000000000000000000000000000000000000000000",
      &value2, sizeof(value2));
  EXPECT_EQ(5, value2.size());

  UInt8 buf[LLDPValue<LLDPType::ChassisID>::maxSize() + 32];
  std::iota(buf, buf + sizeof(buf), 0);

  LLDPValue<LLDPType::ChassisID> value3{{buf, sizeof(buf)}};
  EXPECT_HEX(
      "3F000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122"
      "232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E",
      &value3, sizeof(value3));
  EXPECT_EQ(63, value3.size());
  EXPECT_EQ(LLDPValue<LLDPType::ChassisID>::maxSize(), value3.size());
}

TEST(lldpvalue, chassisID) {
  LLDPValue<LLDPType::ChassisID> value;

  EXPECT_TRUE(value.parse(""));
  EXPECT_HEX(
      "010700000000000000000000000000000000000000000000000000000000000000000000"
      "00000000000000000000000000000000000000000000000000000000",
      &value, sizeof(value));
  EXPECT_EQ("", value.toString());

  EXPECT_TRUE(value.parse("001122334455"));
  EXPECT_HEX(
      "0D0730303131323233333434353500000000000000000000000000000000000000000000"
      "00000000000000000000000000000000000000000000000000000000",
      &value, sizeof(value));
  EXPECT_EQ("001122334455", value.toString());

  EXPECT_TRUE(value.parse("unknown 001122334455"));
  EXPECT_HEX(
      "060011223344550000000000000000000000000000000000000000000000000000000000"
      "00000000000000000000000000000000000000000000000000000000",
      &value, sizeof(value));
  EXPECT_EQ("unknown 001122334455", value.toString());

  EXPECT_TRUE(value.parse("chassis 001122334455"));
  EXPECT_HEX(
      "070100112233445500000000000000000000000000000000000000000000000000000000"
      "00000000000000000000000000000000000000000000000000000000",
      &value, sizeof(value));
  EXPECT_EQ("chassis 001122334455", value.toString());

  EXPECT_TRUE(value.parse("chassis"));
  EXPECT_HEX(
      "010100000000000000000000000000000000000000000000000000000000000000000000"
      "00000000000000000000000000000000000000000000000000000000",
      &value, sizeof(value));
  EXPECT_EQ("chassis ", value.toString());

  EXPECT_TRUE(value.parse("port 001122334455"));
  EXPECT_HEX(
      "070300112233445500000000000000000000000000000000000000000000000000000000"
      "00000000000000000000000000000000000000000000000000000000",
      &value, sizeof(value));
  EXPECT_EQ("port 001122334455", value.toString());

  EXPECT_TRUE(value.parse("ifalias 001122334455"));
  EXPECT_HEX(
      "0D0230303131323233333434353500000000000000000000000000000000000000000000"
      "00000000000000000000000000000000000000000000000000000000",
      &value, sizeof(value));
  EXPECT_EQ("ifalias 001122334455", value.toString());

  EXPECT_TRUE(value.parse("ifalias"));
  EXPECT_HEX(
      "010200000000000000000000000000000000000000000000000000000000000000000000"
      "00000000000000000000000000000000000000000000000000000000",
      &value, sizeof(value));
  EXPECT_EQ("ifalias ", value.toString());

  EXPECT_TRUE(value.parse("ifname 001122334455"));
  EXPECT_HEX(
      "0D0630303131323233333434353500000000000000000000000000000000000000000000"
      "00000000000000000000000000000000000000000000000000000000",
      &value, sizeof(value));
  EXPECT_EQ("ifname 001122334455", value.toString());

  EXPECT_TRUE(value.parse("mac 001122334455"));
  EXPECT_HEX(
      "070400112233445500000000000000000000000000000000000000000000000000000000"
      "00000000000000000000000000000000000000000000000000000000",
      &value, sizeof(value));
  EXPECT_EQ("mac 00:11:22:33:44:55", value.toString());

  EXPECT_TRUE(value.parse("ip 127.0.0.1"));
  EXPECT_HEX(
      "0605017F0000010000000000000000000000000000000000000000000000000000000000"
      "00000000000000000000000000000000000000000000000000000000",
      &value, sizeof(value));
  EXPECT_EQ("ip 127.0.0.1", value.toString());

  EXPECT_TRUE(value.parse("ip6 fe80::11:22:33"));
  EXPECT_HEX(
      "120502FE8000000000000000000011002200330000000000000000000000000000000000"
      "00000000000000000000000000000000000000000000000000000000",
      &value, sizeof(value));
  EXPECT_EQ("ip6 fe80::11:22:33", value.toString());

  EXPECT_TRUE(value.parse("001122334455"));
  EXPECT_HEX("07303031313232333334343535", value.data(), value.size());
  EXPECT_EQ("001122334455", value.toString());
}

TEST(lldpvalue, portID) {
  LLDPValue<LLDPType::PortID> value;

  EXPECT_TRUE(value.parse(""));
  EXPECT_HEX(
      "010700000000000000000000000000000000000000000000000000000000000000000000"
      "00000000000000000000000000000000000000000000000000000000",
      &value, sizeof(value));
  EXPECT_EQ("", value.toString());

  EXPECT_TRUE(value.parse("001122334455"));
  EXPECT_HEX(
      "0D0730303131323233333434353500000000000000000000000000000000000000000000"
      "00000000000000000000000000000000000000000000000000000000",
      &value, sizeof(value));
  EXPECT_EQ("001122334455", value.toString());

  EXPECT_TRUE(value.parse("unknown 001122334455"));
  EXPECT_HEX(
      "060011223344550000000000000000000000000000000000000000000000000000000000"
      "00000000000000000000000000000000000000000000000000000000",
      &value, sizeof(value));
  EXPECT_EQ("unknown 001122334455", value.toString());

  EXPECT_TRUE(value.parse("unknown"));
  EXPECT_HEX(
      "000000000000000000000000000000000000000000000000000000000000000000000000"
      "00000000000000000000000000000000000000000000000000000000",
      &value, sizeof(value));
  EXPECT_EQ("unknown", value.toString());

  EXPECT_TRUE(value.parse("circuit 001122334455"));
  EXPECT_HEX(
      "070600112233445500000000000000000000000000000000000000000000000000000000"
      "00000000000000000000000000000000000000000000000000000000",
      &value, sizeof(value));
  EXPECT_EQ("circuit 001122334455", value.toString());

  EXPECT_TRUE(value.parse("port 001122334455"));
  EXPECT_HEX(
      "070200112233445500000000000000000000000000000000000000000000000000000000"
      "00000000000000000000000000000000000000000000000000000000",
      &value, sizeof(value));
  EXPECT_EQ("port 001122334455", value.toString());

  EXPECT_TRUE(value.parse("ifalias 001122334455"));
  EXPECT_HEX(
      "070100112233445500000000000000000000000000000000000000000000000000000000"
      "00000000000000000000000000000000000000000000000000000000",
      &value, sizeof(value));
  EXPECT_EQ("ifalias 001122334455", value.toString());

  EXPECT_TRUE(value.parse("ifalias"));
  EXPECT_HEX(
      "010100000000000000000000000000000000000000000000000000000000000000000000"
      "00000000000000000000000000000000000000000000000000000000",
      &value, sizeof(value));
  EXPECT_EQ("ifalias ", value.toString());

  EXPECT_TRUE(value.parse("ifname 001122334455"));
  EXPECT_HEX(
      "0D0530303131323233333434353500000000000000000000000000000000000000000000"
      "00000000000000000000000000000000000000000000000000000000",
      &value, sizeof(value));
  EXPECT_EQ("ifname 001122334455", value.toString());

  EXPECT_TRUE(value.parse("mac 001122334455"));
  EXPECT_HEX(
      "070300112233445500000000000000000000000000000000000000000000000000000000"
      "00000000000000000000000000000000000000000000000000000000",
      &value, sizeof(value));
  EXPECT_EQ("mac 00:11:22:33:44:55", value.toString());

  EXPECT_TRUE(value.parse("ip 127.0.0.1"));
  EXPECT_HEX(
      "0604017F0000010000000000000000000000000000000000000000000000000000000000"
      "00000000000000000000000000000000000000000000000000000000",
      &value, sizeof(value));
  EXPECT_EQ("ip 127.0.0.1", value.toString());

  EXPECT_TRUE(value.parse("ip6 fe80::11:22:33"));
  EXPECT_HEX(
      "120402FE8000000000000000000011002200330000000000000000000000000000000000"
      "00000000000000000000000000000000000000000000000000000000",
      &value, sizeof(value));
  EXPECT_EQ("ip6 fe80::11:22:33", value.toString());

  EXPECT_TRUE(value.parse("001122334455"));
  EXPECT_HEX("07303031313232333334343535", value.data(), value.size());
  EXPECT_EQ("001122334455", value.toString());
}

TEST(lldpvalue, bytestring) {
  LLDPValue<LLDPType::ByteString> value;

  EXPECT_TRUE(value.parse(""));
  EXPECT_HEX(
      "000000000000000000000000000000000000000000000000000000000000000000000000"
      "00000000000000000000000000000000000000000000000000000000",
      &value, sizeof(value));
  EXPECT_EQ("", value.toString());

  EXPECT_TRUE(value.parse("portdescr"));
  EXPECT_HEX(
      "09706F727464657363720000000000000000000000000000000000000000000000000000"
      "00000000000000000000000000000000000000000000000000000000",
      &value, sizeof(value));
  EXPECT_EQ("portdescr", value.toString());
}

TEST(lldpvalue, LLDPToString) {
  LLDPType types[] = {LLDPType::ChassisID, LLDPType::PortID,
                      LLDPType::ByteString};

  for (auto type : types) {
    for (size_t i = 0; i < 25; ++i) {
      auto val = ByteList::iota(i);
      if (!val.empty())
        val.mutableData()[0] = UInt8_narrow_cast(i);
      auto s = detail::LLDPToString(type, val.toRange());
      ByteList parsedVal;
      EXPECT_TRUE(detail::LLDPParse(type, s, &parsedVal));
      EXPECT_EQ(val, parsedVal);
    }
  }
}

TEST(lldpvalue, orgSpecific) {
  LLDPValue<LLDPType::OrgSpecific> value;

  EXPECT_TRUE(value.parse("0x123456 0x78 abcdef"));
  EXPECT_HEX(
      "0712345678ABCDEF00000000000000000000000000000000000000000000000000000000"
      "00000000000000000000000000000000000000000000000000000000",
      &value, sizeof(value));
  EXPECT_EQ("0x123456 0x78 ABCDEF", value.toString());

  // Support decimal input also...
  EXPECT_TRUE(value.parse("123456 78 abcdef"));
  EXPECT_HEX(
      "0701E2404EABCDEF00000000000000000000000000000000000000000000000000000000"
      "00000000000000000000000000000000000000000000000000000000",
      &value, sizeof(value));
  EXPECT_EQ("0x1e240 0x4e ABCDEF", value.toString());
}
